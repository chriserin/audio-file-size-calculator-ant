{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["wordSizes","sampleRates","recalcFromState","_ref","wordSize","sampleRate","tracks","hours","minutes","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","total","setState","totalBits","gigabytes","megabytes","react_default","a","createElement","Math","round","_this2","_this$state","className","typography","Title","level","for","Text","es_select","value","onChange","v","recalc","map","option","Option","key","input_number","min","max","renderSize","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21d320e7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\nimport { Typography, Select, InputNumber } from 'antd';\n\nconst wordSizes = [16, 24, 32];\nconst sampleRates = [44.1, 48, 88.2, 96, 192];\n\nconst recalcFromState = ({ wordSize, sampleRate, tracks, hours, minutes }) =>\n  wordSize * sampleRate * 1000 * tracks * ((hours * 60 + minutes) * 60);\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      wordSize: 24,\n      sampleRate: 48,\n      tracks: 24,\n      hours: 1,\n      minutes: 20,\n    };\n\n    this.state.total = recalcFromState(this.state);\n  }\n\n  recalc() {\n    this.setState({\n      total: recalcFromState(this.state),\n    });\n  }\n\n  renderSize(totalBits) {\n    const gigabytes = this.state.total / 8589934592;\n    const megabytes = this.state.total / 8388608;\n    return (\n      <span>\n        {gigabytes < 1 ? (\n          <span>\n            {Math.round(megabytes * 100) / 100}\n            MB{' '}\n          </span>\n        ) : (\n          <span>{Math.round(gigabytes * 100) / 100} GB </span>\n        )}\n      </span>\n    );\n  }\n\n  render() {\n    const { wordSize, sampleRate, tracks, hours, minutes } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Typography.Title level={2}>\n          Audio File Size Calculator\n        </Typography.Title>\n        <div className=\"calculator-elements\">\n          <div className=\"calculator-element\">\n            <label for=\"\">\n              <Typography.Text className=\"input-label\">\n                Word Size\n              </Typography.Text>\n              <Select\n                value={wordSize}\n                onChange={v => this.setState({ wordSize: v }, this.recalc)}\n              >\n                {wordSizes.map(option => (\n                  <Select.Option key={option} value={option}>\n                    {option}-bit\n                  </Select.Option>\n                ))}\n              </Select>\n            </label>\n          </div>\n          <div className=\"calculator-element\">\n            <label for=\"\">\n              <Typography.Text className=\"input-label\">\n                Sample Rate\n              </Typography.Text>\n              <Select\n                value={sampleRate}\n                onChange={v => this.setState({ sampleRate: v }, this.recalc)}\n              >\n                {sampleRates.map(option => (\n                  <Select.Option key={option} value={option}>\n                    {option} kHz\n                  </Select.Option>\n                ))}\n              </Select>\n            </label>\n          </div>\n          <div className=\"calculator-element\">\n            <label for=\"\">\n              <Typography.Text className=\"input-label\">Tracks</Typography.Text>\n              <div className=\"input-section track-number\">\n                <InputNumber\n                  value={tracks}\n                  min={1}\n                  max={1000}\n                  onChange={v => this.setState({ tracks: v }, this.recalc)}\n                />\n              </div>\n            </label>\n          </div>\n          <div className=\"calculator-element\">\n            <label for=\"\">\n              <Typography.Text className=\"input-label\">\n                Recording Length\n              </Typography.Text>\n              <div className=\"input-section song-length\">\n                <InputNumber\n                  value={hours}\n                  min={0}\n                  max={1000}\n                  onChange={v => this.setState({ hours: v }, this.recalc)}\n                />\n                <Typography.Text className=\"time-label\">h</Typography.Text>\n                <InputNumber\n                  value={minutes}\n                  min={0}\n                  max={59}\n                  onChange={v => this.setState({ minutes: v }, this.recalc)}\n                />\n                <Typography.Text className=\"time-label\">m</Typography.Text>\n              </div>\n            </label>\n          </div>\n          <div className=\"seperator calculator-element\" />\n          <div className=\"calculator-element\">\n            <Typography.Title level={3} className=\"input-label\">\n              Total Size:\n            </Typography.Title>\n            <Typography.Title level={3} className=\"total-size\">\n              {this.renderSize(this.state.total)}\n            </Typography.Title>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}